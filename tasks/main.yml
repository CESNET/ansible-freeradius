# REPO @ aaiwiki is using HTTPS.
- name: Install apt-transport-https for aaiwiki repo
  apt: name={{ item }} allow_unauthenticated=yes state=latest
  with_items:
    - apt-transport-https 
  when: ansible_distribution_release=='jessie'

- name: Add our FreeRADIUS repository
  apt_repository:
    repo: deb https://aaiwiki.cesnet.cz/deb/jessie ./
    state: present
    #update_cache: yes
  when: ansible_distribution_release=='jessie'

- name: Update repo cache
  apt: update_cache=yes cache_valid_time=86400

- name: Install pwgen
  apt: name={{ item }} state=latest
  with_items:
    - pwgen

- name: Install/update FreeRADIUS
  apt: name={{ item }} allow_unauthenticated=yes state=latest
  with_items: 
    - freeradius

- name: Enable FreeRADIUS
  systemd: name=freeradius.service enabled=yes

- name: Install/update FreeRADIUS LDAP module
  apt: name={{ item }} allow_unauthenticated=yes state=latest
  when: (eduroam.mode == 'IdPSP') and (ldap is defined)
  with_items: 
    - freeradius-ldap

- name: Install/update stuff for M$ AD
  apt: name={{ item }} allow_unauthenticated=yes state=latest
  when: (eduroam.mode == 'IdPSP') and (msAD is defined)
  with_items:
    - samba
    - winbind
    - krb5-config
    - krb5-user

- name: set FreeRADIUS directory
  set_fact:
    etc_freeradius: /etc/freeradius

# Tenhle stupidni adresar tam maji asi kvuli koexistenci s FR2
- name: overwrite FreeRADIUS directory on stretch
  set_fact:
    etc_freeradius: /etc/freeradius/3.0
  when: ansible_distribution_release=='stretch'

- name: create salt for CUI
  shell: pwgen 20 -n 1 > "{{ etc_freeradius }}/cui_salt"
  args:
    creates: "{{ etc_freeradius }}/cui_salt"

- name: read salt for CUI
  command: cat "{{ etc_freeradius }}/cui_salt"
  register: cui_salt
  changed_when: False
  check_mode: no

- set_fact: cui_salt={{ cui_salt.stdout }}

# copy needed files
- name: Copy freeRADIUS files
  copy: src={{ item.src }} dest={{ item.dest }} mode=0640 owner=freerad group=freerad backup=yes
  with_items:
    - { src: freeradius.logrotate,
        dest: /etc/logrotate.d/freeradius }
    - { src: "{{ eduroam.topRADIUS.CAChain }}",
        dest: "{{ etc_freeradius }}/certs" }
    - { src: post-proxy,
        dest: "{{ etc_freeradius }}/mods-config/attr_filter/post-proxy" }
    - { src: filter,
        dest: "{{ etc_freeradius }}/policy.d/filter" }
    - { src: eduroam-realm-checks,
        dest: "{{ etc_freeradius }}/policy.d/eduroam-realm-checks" }
  notify: restart freeradius

- name: Copy templated freeRADIUS files
  template: src={{ item.src }} dest={{ item.dest }} mode=0640 owner=root group=root backup=yes
  with_items:
    - { src: default.j2,
        dest: "{{ etc_freeradius }}/sites-available/default" }
    - { src: tls.j2,
        dest: "{{ etc_freeradius }}/sites-available/tls" }
    - { src: inner-tunnel.j2,
        dest: "{{ etc_freeradius }}/sites-available/inner-tunnel" }
    - { src: clients.conf.j2,
        dest: "{{ etc_freeradius }}/clients.conf" }
    - { src: proxy.conf.j2,
        dest: "{{ etc_freeradius }}/proxy.conf" }
    - { src: radiusd.conf.j2,
        dest: "{{ etc_freeradius }}/radiusd.conf" }
    - { src: eap.j2,
        dest: "{{ etc_freeradius }}/mods-available/eap" }
    - { src: f_ticks.j2,
        dest: "{{ etc_freeradius }}/mods-available/f_ticks" }
    - { src: kill-weblogin.j2,
        dest: "{{ etc_freeradius }}/policy.d/kill-weblogin" }
    - { src: cui.j2,
        dest: "{{ etc_freeradius }}/policy.d/cui" }
    - { src: mschap.j2,
        dest: "{{ etc_freeradius }}/mods-available/mschap" }
  notify: restart freeradius

- name: link needed files
  file: src={{ item.src }} dest={{ item.dest }} owner=root group=root state=link
  with_items:
    - { src: ../sites-available/tls,
        dest: "{{ etc_freeradius }}/sites-enabled/tls" }
    - { src: ../mods-available/f_ticks,
        dest: "{{ etc_freeradius }}/mods-enabled/f_ticks" }
    - { src: ../mods-available/cui,
        dest: "{{ etc_freeradius }}/mods-enabled/cui" }
  notify: restart freeradius

# Semik: Dokumentaci k volbe static jsem pochopil presne obracene :/
# http://docs.ansible.com/ansible/playbooks_roles.html

- name: IdPSP LDAP specific tasks
  include: idp_role.yml
  static: no
  when: (eduroam.mode == 'IdPSP') and (ldap is defined)

- name: IdPSP M$ AD specific tasks
  include: idp_msad_role.yml
  static: no
  when: (eduroam.mode == 'IdPSP') and (msAD is defined)

- name: remove useless files (SP only or Proxy mode)
  file: dest={{ item }} owner=root group=root state=absent
  when: not (eduroam.mode == 'IdPSP')
  with_items:
    - "{{ etc_freeradius }}/sites-enabled/inner-tunnel"
    - "{{ etc_freeradius }}/mods-enabled/eap"
  notify: restart freeradius

- name: PKCS#12 certs
  include: pkcs12_cert.yml
  static: no
  when: (eduroam.radsec.certificate is undefined) and (eduroam.EAP.certificate is undefined)

- name: PEM certs for EAP
  include: pem_cert_eap.yml
  static: no
  when: eduroam.EAP.certificate is defined

- name: PEM certs for RadSec
  include: pem_cert_radsec.yml
  static: no
  when: eduroam.radsec.certificate is defined

- name: rad_eap_test
  include: rad_eap_test.yml

- name: Copy detailed logs archivator
  copy: src=freeradius-monthly.sh dest=/usr/local/bin/freeradius-monthly.sh mode=0755 owner=root group=root backup=yes

- name: Install detailed logs archivator into cron
  cron: day=7 hour=7 minute=54 job=/usr/local/bin/freeradius-monthly.sh name="detailed log archivation"
